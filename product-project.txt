@CreationTimestamp - Insert쿼리가 발생할 때 시간 값을 적용시켜준다.
@UpdateTimestamp  - Update쿼리가 발생할 때 시간 값을 적용시켜준다.

LocalDateTime.now() : 현재 시간을 저장

jsx문법
js파일내에서 html을 자연스럽게 사용할 수 있도록 해주는 문법



npm start -> 실행 -> index.js
jsx문법
1. 변수에 html태그를 저장할 수 있다.
2. 값은 {value}를 통해서 사용할 수 있다.

다른 컴포넌트로 값이나 함수를 전달할 때
<컴포넌트명 key={value}/>

function 컴포넌트명(props){
      변수명 = props.key -> 넘겨받은 값이나 함수를 사용할 수 있다.
      return (
            {변수명}
      )
}






백엔드
1. 전체 조회
2. 상품 추가

프론트엔드 
1. (백엔드와 통신하여 데이터를 받아서)전체조회를 할 수 있는 화면
2. (입력필드에 데이터를 입력해서 백엔드로 요청할 수 있는)상품 추가 화면

-------------------------------------------------------------------------------------------------
스프링부트 프로젝트 만들고 import 하기
start.spring.io
- java, gradle
- Group : com.korea
- Artifact : product

필요 의존성
- Spring Web
- H2
- lombok
- Spring Data JPA


1. ProductEntity클래스 만들기
- 테이블명 product
속성
- 상품id (primary key)
- 상품이름
- 상품재고
- 상품가격
- 등록날짜
- 수정날짜

2. ProductDTO클래스 만들기
속성
- 상품번호
- 상품이름
- 상품재고
- 상품가격
- 등록날짜
- 수정날짜
기능
Entity -> DTO 변환기능
DTO -> Entity 변환기능

3. ResponseDTO
- 클라이언트와 데이터를 직접적으로 주고받기 위한 DTO클래스
- 제네릭 타입을 가지고 있다.
속성
- String error
- 리스트 data

4. ProductRepository 인터페이스 만들기
- JpaRepository 상속받기

5. 서비스 계층 만들기
ProductService 클래스 생성하기
- ProductRepository 주입하기

6. 표현계층 만들기
ProductController 클래스 생성하기
- ProductService 주입하기

-------------------조회 추가 삭제 등 기능-------------------

7. 조회하기 기능 만들기
- 데이터베이스에 들어있는 모든 상품을 조회하는 API 만들기
- 결과는 ResponseDTO에 담아서 보내기
- ProductService : findAll()
- ProductController
- HTTPMETHOD : GET
- 메서드명 : ResponseEntity<?> productList()

8. 추가하기
- 클라이언트로부터 데이터를 넘겨 받아서 DB에 데이터 추가하기
- 모든데이터를 반환하기
ProductService
- 메서드명 : create()
ProductController
- HTTP메서드 : POST
- 메서드명 : createProduct()

9. 주문하기
OrderEntity
- com.korea.product.model에 OrderEntity클래스 만들기
-속성
주문법호
상품번호
주문개수
주문날짜

10. OrderDTO
- 주문내역을 조회할 때 총 결제금액까지 보여줄것이다.

-속성
주문번호
상품번호
상품이름
주문개수
상품가격
결제금액
주문날짜

11. OrderRepository
- JpaRepositoy 상속받는다.

12. OrderService클래스
- OrderRepositoty를 주입

13. OrderController클래스
- OrderService를 주입
- mapping : orders

14. 주문내역 조회하기
- findAllOrderTotalPrices()

15. OrderService에서
- 메서드명 : getAllOrderTotalPrices();

16. OrderController에서
- HTTP 메서드 : GET
- 리소스 : total
- 메서드명 : getAllOrderTotals()

17. 주문하기
- 클라이언트로부터 productId와 productCount를 전달받아 주문테이블에 주문내역 추가하기
- 메서드명 : save()
OrderService에 주문하기 로직
1. 상품이 존재하는지 확인
2. 재고를 확인
3. 주문하기(DB에 주문내역 저장하기
4. 재고감소
5. 전체 목록 반환하기


-WebMvcConfig 클래스만들기
------------------------------------------------------------
상품정보를 볼 수 있는 화면 만들기
- product-react-app 이름으로 리액트 프로젝트 만들기
- src에 p_info.js 만들기
- axios로 백엔드 데이터를 요청하고 받아와서 화면에 출력하기
- ApiService파일의 call메서드를 사용해도 좋습니다.

- src에 AddProduct.js만들기
- 상품추가 버튼을 누르면

주문하기

OrderEntity

- 라디오버튼을 누른 필드만 입력할 수 있게 하고
- 라이도버튼을 누르고 주문개수를 입력해서 주문완료 버튼을 누르면 백엔드로 전달


















